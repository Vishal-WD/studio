
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check for HOD/Dean designation
    function isDeanOrHod() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.designation in ['dean', 'hod'];
    }

    match /users/{userId} {
      allow list: if isAdmin();
      allow read, update, delete: if isAdmin() || request.auth.uid == userId;
      allow create: if request.auth != null; // User creation handled by admin dialog using a temporary auth instance
    }
    
    match /posts/{postId} {
      allow read: if request.auth != null;
      
      // Admins can write to any post (for updates). Users can only update/delete their own.
      allow write: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.authorId);

      // Create is limited to Deans and HODs, and they must be the author.
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.authorId && 
                      isDeanOrHod();
    }
    
    match /events/{eventId} {
      allow read: if request.auth != null;

      // Admins can write to any event (for updates). Users can only update/delete their own.
      allow write: if request.auth != null && (isAdmin() || request.auth.uid == resource.data.authorId);
      
      // Create is limited to Faculty and Admins.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['faculty', 'admin'];
    }

    match /resources/{resourceId} {
      // Users can only read resources from their own department.
      allow read: if request.auth != null 
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == resource.data.department;

      // Only Deans/HODs can write to resources in their own department.
      allow write: if request.auth != null && isDeanOrHod() &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == resource.data.department;
    }
  }
}
